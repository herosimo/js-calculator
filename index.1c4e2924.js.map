{"mappings":"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","sources":["src/script.js"],"sourcesContent":["// Output\r\nlet prev = null;\r\nlet current = null;\r\nlet operand = null;\r\n\r\n// Output Screen\r\nconst prevScreen = document.querySelector(\"[data-previous]\");\r\nconst currentScreen = document.querySelector(\"[data-current]\");\r\nconst operandScreen = document.querySelector(\"[data-operand]\");\r\n\r\n// Buttons\r\nconst numbers = Array.from(document.querySelectorAll(\"[data-numbers]\"));\r\nconst ac = document.querySelector(\"[data-ac]\");\r\nconst del = document.querySelector(\"[data-del]\");\r\nconst plusMinus = document.querySelector(\"[data-plus-minus]\");\r\nconst divides = document.querySelector(\"[data-divides]\");\r\nconst times = document.querySelector(\"[data-times]\");\r\nconst mins = document.querySelector(\"[data-mins]\");\r\nconst adds = document.querySelector(\"[data-adds]\");\r\nconst equals = document.querySelector(\"[data-equals]\");\r\n\r\n// General functions\r\n// Create commas after finding 3 values\r\nconst updateNumberWithCommas = (numbers) => {\r\n  if (numbers) {\r\n    var parts = numbers.toString().split(\".\");\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return parts.join(\".\");\r\n  } else {\r\n    return numbers;\r\n  }\r\n};\r\n\r\n// Remove the commas\r\nconst updateNumberToOriginalValue = (numbers) => {\r\n  if (numbers) {\r\n    return numbers.toString().split(\",\").join(\"\");\r\n  } else {\r\n    return numbers;\r\n  }\r\n};\r\n\r\nconst updateScreen = (prevVal, currentVal) => {\r\n  prev = updateNumberToOriginalValue(prevVal);\r\n  current = updateNumberToOriginalValue(currentVal);\r\n\r\n  prevScreen.innerHTML = updateNumberWithCommas(prev);\r\n  currentScreen.innerHTML = updateNumberWithCommas(current);\r\n};\r\n\r\nconst updateOperand = (operandVal) => {\r\n  operand = operandVal;\r\n  operandScreen.innerHTML = operand;\r\n};\r\n\r\nconst updateValue = () => {\r\n  switch (operand) {\r\n    case \"+\":\r\n      prev =\r\n        Number(updateNumberToOriginalValue(prev)) + Number(updateNumberToOriginalValue(current));\r\n      current = null;\r\n      break;\r\n\r\n    case \"-\":\r\n      prev =\r\n        Number(updateNumberToOriginalValue(prev)) - Number(updateNumberToOriginalValue(current));\r\n      current = null;\r\n      break;\r\n\r\n    case \"×\":\r\n      prev =\r\n        Number(updateNumberToOriginalValue(prev)) * Number(updateNumberToOriginalValue(current));\r\n      current = null;\r\n      break;\r\n\r\n    case \"÷\":\r\n      prev =\r\n        Number(updateNumberToOriginalValue(prev)) / Number(updateNumberToOriginalValue(current));\r\n      current = null;\r\n      break;\r\n  }\r\n};\r\n\r\n// User clicks numbers\r\nconst numberClick = (e) => {\r\n  // Control when first value is 0\r\n  if (currentScreen.innerHTML && currentScreen.innerHTML[0].includes(\"0\")) {\r\n    if (e.target.innerHTML === \"0\" && !currentScreen.innerHTML.includes(\".\")) {\r\n      // Prevent double zeros\r\n      return;\r\n    } else if (e.target.innerHTML !== \".\" && !currentScreen.innerHTML.includes(\".\")) {\r\n      // Remove zero at first value when it's not a decimal\r\n      currentScreen.innerHTML = currentScreen.innerHTML.substring(1);\r\n    }\r\n  }\r\n\r\n  // Control button dot\r\n  if (e.target.innerHTML === \".\") {\r\n    // Prevent double dots\r\n    if (currentScreen.innerHTML.includes(\".\")) {\r\n      return;\r\n    }\r\n\r\n    // Give zero when typing first dot\r\n    if (!currentScreen.innerHTML) {\r\n      currentScreen.innerHTML = \"0\";\r\n    }\r\n  }\r\n  // Control when user types a number\r\n  if (e.target.innerHTML === \"000\" && !currentScreen.innerHTML) {\r\n    // Prevent triple zeros at first value\r\n    currentScreen.innerHTML = \"0\";\r\n  } else {\r\n    updateScreen(prev, currentScreen.innerHTML + e.target.innerHTML);\r\n  }\r\n};\r\n\r\nnumbers.forEach((number) => {\r\n  number.addEventListener(\"click\", numberClick);\r\n});\r\n\r\n// User clicks delete\r\nconst delClick = () => {\r\n  updateScreen(prev, currentScreen.innerHTML.slice(0, currentScreen.innerHTML.length - 1));\r\n};\r\n\r\ndel.addEventListener(\"click\", delClick);\r\n\r\n// User clicks AC\r\nconst acClick = () => {\r\n  updateScreen(null, null);\r\n  updateOperand(null);\r\n};\r\n\r\nac.addEventListener(\"click\", acClick);\r\n\r\n// User clicks operation (-, +, *, /)\r\nconst doOperation = (operandVal) => {\r\n  if (!current && current !== 0 && !prev) {\r\n    return;\r\n  }\r\n\r\n  if (!prev) {\r\n    updateOperand(operandVal);\r\n    updateScreen(current, null);\r\n  } else if (!current) {\r\n    updateOperand(operandVal);\r\n  } else {\r\n    updateValue();\r\n    updateScreen(prev, current);\r\n    updateOperand(operandVal);\r\n  }\r\n};\r\n\r\n// User clicks equals\r\nconst doEquals = () => {\r\n  if (!operand && !prev) {\r\n    return;\r\n  }\r\n\r\n  if (!current) {\r\n    return;\r\n  }\r\n\r\n  updateValue(operand);\r\n  current = prev;\r\n  prev = null;\r\n  updateOperand(null);\r\n  updateScreen(prev, current);\r\n};\r\n\r\n// User clicks plus-minus\r\nconst doPlusMinus = () => {\r\n  if (!current) {\r\n    return;\r\n  }\r\n\r\n  updateScreen(prev, -Number(updateNumberToOriginalValue(currentScreen.innerHTML)));\r\n};\r\n\r\nadds.addEventListener(\"click\", () => doOperation(\"+\"));\r\nmins.addEventListener(\"click\", () => doOperation(\"-\"));\r\ntimes.addEventListener(\"click\", () => doOperation(\"×\"));\r\ndivides.addEventListener(\"click\", () => doOperation(\"÷\"));\r\nplusMinus.addEventListener(\"click\", doPlusMinus);\r\nequals.addEventListener(\"click\", doEquals);\r\n"],"names":["prev","current","operand","prevScreen","document","querySelector","currentScreen","operandScreen","numbers","Array","from","querySelectorAll","ac","del","plusMinus","divides","times","mins","adds","equals","updateNumberWithCommas","numbers1","parts","toString","split","replace","join","updateNumberToOriginalValue","numbers2","updateScreen","prevVal","currentVal","innerHTML","updateOperand","operandVal","updateValue","Number","numberClick","e","includes","target","substring","forEach","number","addEventListener","delClick","slice","length","acClick","doOperation","doEquals","doPlusMinus"],"version":3,"file":"index.1c4e2924.js.map"}